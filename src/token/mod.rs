#[derive(Debug, PartialEq, Clone, Eq)]
pub enum Token {
    LET,
    IDENT(String),
    EQUAL,
    INT(i64),
    ASSIGN,
    PLUS,
    MINUS,
    COMMA,
    SEMICOLON,
    LPAREN,
    RPAREN,
    LBRAKET,
    RBRAKET,
    FUNCTION,
    BANG,
    ASTERISK,
    SLASH,
    LT,
    GT,
    IF,
    ELSE,
    RETURN,
    TRUE,
    FALSE,
    String(String),
}

pub fn token_from_literal(lieral: String) -> Token {
    match lieral.as_ref() {
        "let" => Token::Let,
        "fn" => Token::Function,
        "=" => Token::Assign,
        "==" => Token::Equal,
        "+" => Token::Plus,
        "(" => Token::LParen,
        ")" => Token::RParen,
        "{" => Token::LBrace,
        "}" => Token::RBrace,
        "-" => Token::Minus,
        "," => Token::Comma,
        ";" => Token::Semicolon,
        "!" => Token::Bang,
        "*" => Token::Asterisk,
        "/" => Token::Slash,
        "<" => Token::Lt,
        ">" => Token::Gt,
        "if" => Token::If,
        "else" => Token::Else,
        "return" => Token::Return,
        "true" => Token::True,
        "false" => Token::False,
        _ => Token::Ident(lieral),
    }
}